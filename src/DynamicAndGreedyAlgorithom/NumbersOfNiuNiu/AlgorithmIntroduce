对于样例：“niuniniu”，我们可以发现，第2个'n'后面有2个'i'，最后一个'u'，因此贡献2个匹配。第3个'n'后有1个'i'，1个'u'，因此贡献1个匹配。最终答案：3个匹配。 

可以发现：对于模式串pat（长为n），我们记录各字符的匹配状态，即dp[j]表示pat[0,j]（0<=j<n）的匹配数量。若下一个字符为pat[j+1]，那么pat[0,j+1]的匹配数量只和pat[0,j]的匹配数量相关，即dp[j+1]和dp[j]相关。具体地，若当前pat[0,j]的匹配数量为x，即dp[j]=x，那么若新字符s[i]==pat[j+1]，那么dp[j+1] = dp[j+1] + dp[j]，含义就是pat[0,j+1]的匹配数量=其之前匹配的数量+新字符pat[j+1]和之前pat[0,j]组成的新pat[0,j+1]的数量。有趣的是，由于是子序列匹配，因此新字符s[i]=pat[j]会和之前的pat[0,j]组成新的pat[0,j+1]，和之前组成的pat[0,j+1]无交集。 

状态转移方程：dp[j] = (dp[j]+dp[j-1])%mod 